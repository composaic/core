# TARSX Conversation Script Language (C) TARS & JJ 2025
version 0.1

name "Project Dependencies Upgrade"
description "Checking and upgrading dependencies across all projects"
requires ["npm", "npx", "git"]

# Import required macros
import { date, time } from "./std/datetime"

# Helper function to generate unique branch name
def branch_name = `feature/deps-upgrade-${@date}-${@time}`

# Project Definitions
projects {
    core "/Users/johnny/dev/composaic/core"
    web "/Users/johnny/dev/composaic/web"
    demo "/Users/johnny/dev/composaic/demo"
}

# Context Definitions
init {
    context "core" { path "${projects.core}" }
    context "web" { path "${projects.web}" }
    context "demo" { path "${projects.demo}" }
}

# Variables for state tracking
vars {
    core_updated false
    web_updated false
    demo_updated false
    exclude_deps "@types/react,@types/react-dom,react,react-dom"
}

# Preamble - Check and install ncu if needed
batch "NCU Setup" {
    expect "npm-check-updates is available"
    
    use-context "core"
    step "Check NCU" {
        run "npx npm-check-updates --version || npm install -g npm-check-updates"
        validate {
            require "npm-check-updates is installed"
        }
    }

    on_failure {
        log "Failed to setup npm-check-updates"
        exit 1
    }
}

# Task 1 - Check core dependencies
batch "Core Dependency Check" {
    expect "Core dependencies checked for updates"

    use-context "core"
    step "Update Main Branch" {
        run "git pull origin main"
    }

    step "Create Upgrade Branch" {
        run `git checkout -b ${branch_name}`
    }

    step "Check Latest Versions" {
        run `npx ncu -u -x '${exclude_deps}'`
        validate {
            when "All dependencies match the latest package versions" {
                log "No core updates needed"
                set core_updated = false
            }
            when not "All dependencies match the latest package versions" {
                log "Core updates found"
                set core_updated = true
            }
        }
    }

    when core_updated {
        step "Install Updates" {
            run "npm install"
            run "npm audit fix"
            validate {
                require "All packages installed successfully"
            }
        }
    }

    on_failure {
        log "Core dependency check failed"
        step "Cleanup Branch" {
            run "git checkout main"
            run `git branch -D ${branch_name}`
        }
        exit 1
    }
}

# Task 2 - Check web dependencies
batch "Web Project Check" {
    expect "Web project dependencies checked"

    use-context "web"
    step "Update Main Branch" {
        run "git pull origin main"
    }

    step "Create Upgrade Branch" {
        run `git checkout -b ${branch_name}`
    }

    step "Check Web Dependencies" {
        run `npx ncu -u -x '${exclude_deps}'`
        validate {
            when "All dependencies match the latest package versions" {
                log "No web updates needed"
                set web_updated = false
            }
            when not "All dependencies match the latest package versions" {
                log "Web updates found"
                set web_updated = true
            }
        }
    }

    when web_updated {
        step "Install Updates" {
            run "npm install"
            run "npm audit fix"
            validate {
                require "All packages installed successfully"
            }
        }
    }

    on_failure {
        log "Web project check failed"
        step "Cleanup Branch" {
            run "git checkout main"
            run `git branch -D ${branch_name}`
        }
        exit 1
    }
}

# Task 3 - Check demo dependencies
batch "Demo Project Check" {
    expect "Demo project dependencies checked"

    use-context "demo"
    step "Update Main Branch" {
        run "git pull origin main"
    }

    step "Create Upgrade Branch" {
        run `git checkout -b ${branch_name}`
    }

    step "Check Demo Dependencies" {
        run `npx ncu -u -x '${exclude_deps}'`
        validate {
            when "All dependencies match the latest package versions" {
                log "No demo updates needed"
                set demo_updated = false
            }
            when not "All dependencies match the latest package versions" {
                log "Demo updates found"
                set demo_updated = true
            }
        }
    }

    when demo_updated {
        step "Install Updates" {
            run "npm install"
            run "npm audit fix"
            validate {
                require "All packages installed successfully"
            }
        }
    }

    on_failure {
        log "Demo project check failed"
        step "Cleanup Branch" {
            run "git checkout main"
            run `git branch -D ${branch_name}`
        }
        exit 1
    }
}

# Check if any updates were found
batch "Update Summary" {
    step "Check Updates" {
        validate {
            when not core_updated and not web_updated and not demo_updated {
                log "No updates needed in any project"
                exit 0
            }
            when core_updated or web_updated or demo_updated {
                log "Updates found, proceeding with integration"
            }
        }
    }
}

# Task 4 - Integration Tests
batch "Integration Tests" when core_updated or web_updated or demo_updated {
    expect "Projects integrate successfully"

    when core_updated {
        use-context "core"
        step "Build Core Project" {
            run "npm run build"
            validate {
                require "Core build succeeds"
            }
        }

        step "Test Core Project" {
            run "npm test"
            validate {
                require "Core tests pass"
            }
        }

        step "Link Core Project" {
            run "npm link"
            validate {
                require "Core linked successfully"
            }
        }
    }

    when web_updated {
        use-context "web"
        step "Install Web" {
            run "npm install"
            validate {
                require "Web dependencies installed"
            }
        }

        when core_updated {
            step "Link Core" {
                run "npm link @composaic/core"
                validate {
                    require "Core linked to web"
                }
            }
        }

        step "Build Web" {
            run "npm run build"
            validate {
                require "Web build succeeds"
            }
        }

        step "Link Web Project" {
            run "npm link"
            validate {
                require "Web linked successfully"
            }
        }
    }

    when demo_updated {
        use-context "demo"
        step "Install Demo" {
            run "npm install"
            validate {
                require "Demo dependencies installed"
            }
        }

        when core_updated {
            step "Link Core" {
                run "npm link @composaic/core"
                validate {
                    require "Core linked to demo"
                }
            }
        }

        when web_updated {
            step "Link Web" {
                run "npm link @composaic/web"
                validate {
                    require "Web linked to demo"
                }
            }
        }

        step "Run Tests" {
            run "npm test"
            validate {
                require "Demo tests pass"
            }
        }
    }

    on_failure {
        log "Integration tests failed"
        when core_updated or web_updated {
            use-context "demo"
            rollback "npm unlink @composaic/core @composaic/web"
        }

        # Clean up feature branches in all updated projects
        when core_updated {
            use-context "core"
            step "Cleanup Core Branch" {
                run "git checkout main"
                run `git branch -D ${branch_name}`
            }
        }
        when web_updated {
            use-context "web"
            step "Cleanup Web Branch" {
                run "git checkout main"
                run `git branch -D ${branch_name}`
            }
        }
        when demo_updated {
            use-context "demo"
            step "Cleanup Demo Branch" {
                run "git checkout main"
                run `git branch -D ${branch_name}`
            }
        }
        exit 1
    }
}
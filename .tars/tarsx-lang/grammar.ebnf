/* TARSX v0.1 Grammar in EBNF */

/*
 * TARSX is an instruction set for AI task execution with emphasis on:
 * - Batched operations for efficiency
 * - Grouped information gathering
 * - Minimizing tool/API usage
 * 
 * Case Sensitivity Rules:
 * - Keywords are case-insensitive (e.g., 'version' or 'VERSION')
 * - String literals and variables are case-sensitive
 * - By convention, keywords are written in lowercase
 */

Script ::= Copyright VersionDecl Metadata ProjectDefs? InitBlock BatchOperations

Copyright ::= "#" "TARSX Conversation Script Language (C) TARS & JJ 2025"

VersionDecl ::= "version" "0.1"

Metadata ::= NameDecl DescriptionDecl ResourcesDecl?
NameDecl ::= "name" StringLiteral
DescriptionDecl ::= "description" StringLiteral
ResourcesDecl ::= "requires" ResourceList

/* Project Management */
ProjectDefs ::= "projects" "{" ProjectDef+ "}"
ProjectDef ::= Identifier StringLiteral

/* Context Management */
InitBlock ::= "init" "{" ContextDef+ "}"
ContextDef ::= "context" StringLiteral "{" /* Defines a working directory */
    "path" StringLiteral
    "}"

UseContext ::= "use-context" StringLiteral /* Changes working directory */

BatchOperations ::= PrepareBatch* ExecuteBatch*

PrepareBatch ::= "prepare" StringLiteral "{" 
    VariableDecls
    InfoGathering?
    "}"

VariableDecls ::= VariableDecl*
VariableDecl ::= "set" Identifier "=" Value

InfoGathering ::= "gather" StringLiteral "{" 
    ResourceQuery+
    "}"

ResourceQuery ::= "query" StringLiteral "{" 
    PathPattern
    DataNeeded
    "}"

ExecuteBatch ::= "batch" StringLiteral "{"
    ["expect" StringLiteral]
    Operations
    ValidationChecks?
    ErrorHandler?
    "}"

Operations ::= (Operation | UseTerminal)+
Operation ::= 
    | Step
    | IfStatement
    | ForLoop
    | AskStatement
    | Checkpoint

Step ::= "step" StringLiteral "{" 
    ["expect" StringLiteral]
    "run" StringLiteral
    "}"

ErrorHandler ::= "on_failure" "{" 
    ["log" StringLiteral]
    (RollbackCommand | "exit" Number | "continue" | "retry")
    "}"

RollbackCommand ::= "rollback" StringLiteral

IfStatement ::= "if" Condition "{" 
    Operations 
    "}" ["else" "{" Operations "}"]

ForLoop ::= "for" Identifier "in" ListValue "{" 
    Operations 
    "}"

AskStatement ::= "ask" StringLiteral "{" 
    OnClause+
    ["timeout" Number]
    "}"

OnClause ::= "on" StringLiteral "->" Operations

Checkpoint ::= "checkpoint" StringLiteral "{" 
    Requirement+
    "}"

Requirement ::= "require" StringLiteral

ValidationChecks ::= "validate" "{" 
    Requirement+
    "}"

Comment ::= "#" Text | "/*" Text "*/"

/* Data Types */
Value ::= StringLiteral | Number | ListValue | BooleanValue | ObjectValue
StringLiteral ::= '"' Text '"'
Number ::= ["-"] Digit+ ["." Digit+]
ListValue ::= "[" (Value ("," Value)*)? "]"
BooleanValue ::= "true" | "false"
ObjectValue ::= "{" (ObjectEntry ("," ObjectEntry)*)? "}"
ObjectEntry ::= StringLiteral ":" Value
Identifier ::= Letter (Letter | Digit | "_")*

/* Resource Patterns */
PathPattern ::= StringLiteral ("," StringLiteral)*
DataNeeded ::= "[" (StringLiteral ("," StringLiteral)*)? "]"
ResourceList ::= "[" (StringLiteral ("," StringLiteral)*)? "]"

/* Variable Substitution */
Substitution ::= "${" (Identifier | (Identifier "." Identifier)) "}"

/* Basic Elements */
Condition ::= Value ComparisonOp Value
ComparisonOp ::= "==" | "!=" | ">" | "<" | ">=" | "<="
